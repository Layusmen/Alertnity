@page "/"
@using Alertnity
@using Alertnity.PoliceApi
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using Alertnity.Web.Models
@inject IJSRuntime JSRuntime
@using Blazorise



<h1 class="container mt-3 align-items-center"> Welcome to Alertnity! Check Your Community Crime Details </h1>

<div class="container mt-5 d-flex align-items-center justify-content-center">
    <EditForm Model="@FormInfo">
        <Fields>
            <Field ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
                <FieldLabel>
                    Postcode
                </FieldLabel>
                <FieldBody>
                    <TextEdit Placeholder="Postcode" TValue="Text" @bind-Text="FormInfo.Postcode" />
                    <Paragraph>
                        Please Insert Postcode in this format: PO148B
                    </Paragraph>
                </FieldBody>
            </Field>
            <Field ColumnSize="ColumnSize.Is6.OnDesktop.Is12.OnMobile">
                <FieldLabel>
                    Date To Check
                </FieldLabel>
                <FieldBody>
                    <YearMonthInput Placeholder="Insert Year and Month; YYYY-MM" TValue="Text" @bind-Value="FormInfo.DateString" />
                </FieldBody>
                <FieldLabel>
                    Insert month in this format: YYYY-MM.
                </FieldLabel>
            </Field>
            <Button Color="Color.Primary" Clicked="@FormSubmitted">Submit</Button>
        </Fields>
    </EditForm>

</div>

<!--Crime Map Display-->
<h2 class="text-center pt-4">Crime Scene Map</h2>
<div id="myMap" class="container border-5 mt-5" style="position:relative;width:100%;min-width:290px;height:600px;">
</div>

@if (results != null && results.Any())
{
    <div class="container border-5 mt-5" style="position:relative;width:100%;min-width:290px;height:600px;">
        <h2 class="text-center pt-4">Category Counts</h2>
        <div class="mb-3">
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@ScrollToRow">Scroll To Row</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@ScrollToPixels">Scroll To Pixels</Button>
        </div>

        <Table @ref="@tableRef" FixedHeader FixedHeaderTableHeight="600px">

            <TableHeader ThemeContrast="ThemeContrast.Dark">
                <TableRow>
                    <TableHeaderCell>#</TableHeaderCell>
                    <TableHeaderCell>Category</TableHeaderCell>
                    <TableHeaderCell>Count</TableHeaderCell>
                </TableRow>
            </TableHeader>

            @{
                // Reset categoryNumber before starting the loop
                int categoryNumber = 0;
            }
            @foreach (var (index, kvp) in categoryCounts.Select((kvp, index) => (index, kvp)))
            {
                categoryNumber++;
                <TableBody>

                    <TableRow>
                        <TableRowHeader>@(index + 1)</TableRowHeader>
                        <TableRowCell>@kvp.Key</TableRowCell>
                        <TableRowCell>@kvp.Value</TableRowCell>
                    </TableRow>

                </TableBody>
            }
        </Table>
    </div>

    <div class="container border-5 mt-5" style="position:relative;width:100%;min-width:290px;height:500px;">
        <h2 class="text-center pt-4">Street Crime Counts</h2>
        <div class="mb-3">
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@ScrollToRow">Scroll To Row</Button>
            <Button Size="Size.Small" Color="Color.Primary" Clicked="@ScrollToPixels">Scroll To Pixels</Button>
        </div>

        <Table @ref="@tableRef" FixedHeader FixedHeaderTableHeight="600px">
            <TableHeader ThemeContrast="ThemeContrast.Dark">
                <TableRow>
                    <TableHeaderCell>#</TableHeaderCell>
                    <TableHeaderCell>Street</TableHeaderCell>
                    <TableHeaderCell>Number of Crimes on the Street</TableHeaderCell>
                    <TableHeaderCell>Latitude</TableHeaderCell>
                    <TableHeaderCell>Longitude</TableHeaderCell>
                    <TableHeaderCell>Crimes Count By Type</TableHeaderCell>
                </TableRow>
            </TableHeader>
            @foreach (var (index, street) in streetCounts.Select((street, index) => (index, street)))
            {
                <TableBody>
                    <TableRow>
                        <TableRowHeader>@(index + 1)</TableRowHeader>
                        
                        <TableRowCell>@street.StreetName</TableRowCell>
                        <TableRowCell>@street.CrimeCount</TableRowCell>
                        <TableRowCell>@street.Latitude</TableRowCell>
                        <TableRowCell>@street.Longitude</TableRowCell>
                        <TableRowCell>
                            <ul>
                                @foreach (var crimeType in street.CrimeCountsByType)
                                {
                                    <li>@crimeType.Key: @crimeType.Value</li>
                                }
                            </ul>
                        </TableRowCell>
                    </TableRow>
                </TableBody>
            }
        </Table>
    </div>

    <div class="m-3">
        <p>Total number of Crimes Recorded for the whole Month: @results.Count</p>
        <p>Date Searched: @DateTime.Now.ToString("MMMM yyyy")</p>
    </div>
}

@code {

    private CrimeCheckModel FormInfo = new CrimeCheckModel();
    List<CrimeInfo> results = new();
    private Dictionary<string, int> categoryCounts = new();
    private List<StreetCrimeData> streetCounts = new();

    private async Task FormSubmitted()
    {

        // Handle form submission
        Console.WriteLine($"Submitted Postcode: {FormInfo.Postcode}");
        Console.WriteLine($"Submitted Date: {FormInfo.DateString}");


        results = ApiMethods.CheckPostcodeCrimeRate(FormInfo.Postcode, FormInfo.Date);

        if (results != null && results.Any())
        {
            CountCategories();
            CountStreets();
            // Pass the crime data to JavaScript
            var crimeData = results.Select(ci => new
            {
                Longitude = float.Parse(ci.location.longitude.ToString(CultureInfo.InvariantCulture)),
                Latitude = float.Parse(ci.location.latitude.ToString(CultureInfo.InvariantCulture)),
                Street = ci.location.street.Name,
                Count = results.Count(c => c.location.longitude == ci.location.longitude && c.location.latitude == ci.location.latitude && ci.location.street.Name == ci.location.street.Name)
            }).ToList();

            // Calling JS function with coordinates
            await JSRuntime.InvokeVoidAsync("getMap", crimeData);
        }
        else { Console.WriteLine("Check the authenticity of the api addresses. Something is wrong somewhere"); }
    }

    private void CountCategories()
    {
        categoryCounts = results
            .GroupBy(ci => ci.category)
            .ToDictionary(g => g.Key, g => g.Count());
    }

    private void CountStreets()
    {
        streetCounts = results
            .GroupBy(ci => new { ci.location?.street?.Name, ci.location?.latitude, ci.location?.longitude })
            .Select(g => new StreetCrimeData
                {
                    StreetName = g.Key.Name,
                    CrimeCount = g.Count(),
                    Latitude = g.Key.latitude,
                    Longitude = g.Key.longitude,
                    Crimes = string.Join(", ", g.Select(ci => ci.category)),
                    CrimeCountsByType = g.GroupBy(ci => ci.category)
                                                                                        .ToDictionary(grp => grp.Key, grp => grp.Count())
                })
            .ToList();
    }

    //TableRef

    Table tableRef;

    private Task ScrollToRow()
    => tableRef.ScrollToRow(1).AsTask();

    private Task ScrollToPixels()
    => tableRef.ScrollToPixels(400).AsTask();



}
<script>
    window.getMap = function (crimeData) {
        if (!crimeData || crimeData.length === 0) {
            console.error("No crime data provided.");
            return;
        }

        // Debugging: Check the crime data
        console.log("Received crime data: ", crimeData);

        // Ensure the first item has valid coordinates
        const firstCrime = crimeData[0];
        const longitude = parseFloat(firstCrime.longitude);
        const latitude = parseFloat(firstCrime.latitude);

        if (isNaN(longitude) || isNaN(latitude)) {
            console.error("Invalid coordinates for the first crime data:", firstCrime);
            return;
        }

        // Initialize the map instance with the first crime location
        var map = new atlas.Map('myMap', {
            center: [longitude, latitude],
            zoom: 13,
            view: 'Auto',

            // AzureMap Authentication
            authOptions: {
                authType: 'subscriptionKey',
                subscriptionKey: '3UzKDPLy12XBZ29RhdB9DVQo5lb3ewnSmvtgGzmPW4CaLBbL1Mi1JQQJ99AHACi5Ypz6xdAlAAAgAZMPfHOj'
            }
        });

        // Wait until the map resources are ready
        map.events.add('ready', function () {
            console.log("Map is ready.");

            // Create a data source and add it to the map
            var datasource = new atlas.source.DataSource();
            map.sources.add(datasource);

            // Create a circle from the first crime location's coordinates
            var pointFeature = new atlas.data.Feature(new atlas.data.Point([longitude, latitude]), {
                subType: "Circle",
                radius: 600
            });
            datasource.add(pointFeature);

            // Log the point feature details
            console.log("Datasource point feature: ", pointFeature);

            // Create a polygon layer to render the filled-in area of the circle polygon, and add it to the map
            map.layers.add(new atlas.layer.PolygonLayer(datasource, null, {
                fillColor: 'green'
            }));

            // Add markers for all crime locations
            crimeData.forEach(function (crime) {
                var markerPosition = [parseFloat(crime.longitude), parseFloat(crime.latitude)];

                // Ensure marker position has valid coordinates
                if (isNaN(markerPosition[0]) || isNaN(markerPosition[1])) {
                    console.error("Invalid coordinates for marker: ", markerPosition);
                    return;
                }

                console.log("Adding marker at position: ", markerPosition);

                var marker = new atlas.HtmlMarker({
                    htmlContent: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="80" viewBox="0 0 200 80" xml:space="preserve"><rect x="0" y="0" rx="8" ry="8" width="200" height="60" fill="purple"/>
                                                                    <polygon fill="purple" points="10,59 190,59 100,80 10,59"/><text x="100" y="40" style="font-size:12px;font-family:arial;fill:#ffffff;" text-anchor="middle">${crime.street}</text><text x="100" y="20" style="font-size:14px;font-family:arial;fill:#ffffff;" text-anchor="middle">Number of Crime: ${crime.count}</text>
                                                                    </svg>`,
                    color: '',
                    text: `${crime.street} <br>"Crime Recorded:" ${crime.count.toString()}`,

                    position: markerPosition
                });

                // Add marker to the map
                map.markers.add(marker);
            });

            // Optional: Check if the markers have been added
            console.log("Markers added to the map: ", map.markers.getMarkers());
        });
    }
</script>



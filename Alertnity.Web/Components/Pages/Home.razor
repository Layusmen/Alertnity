@page "/"

@using Alertnity;
@using Alertnity.ArchiveDataAnalysis;
@using Alertnity.PoliceApi;
@using System.ComponentModel.DataAnnotations;
@using System.Globalization;
@using Alertnity.PostcodeApi;
@using Alertnity.Web.Components.Pages.CrimeAnalysis
@using Alertnity.Web.Models;
@inject IJSRuntime JSRuntime;
@using Blazorise;
@using Blazorise.LoadingIndicator
@using CsvHelper;
@using CsvHelper.Configuration;
@using Microsoft.AspNetCore.Components.Web.Extensions;
@inject ProtectedSessionStorage ProtectedSessionStorage;

<div class="pb-5 pt-5" style="background-color:  #faf9f6;">
    <div class="container mt-2 d-flex align-items-center justify-content-center">
        <Image Source="bootstrap/Images/comtitynew.png" Text="Comtity" />
    </div>

    <div class="container mt-5 d-flex flex-column align-items-center justify-content-center greeting">
        <h1 class="fw-bolder " style="color: rgb(190,64,210);">Welcome to Comtity!</h1>
        <h1 class="fw-bolder p-3" style="color: #800080;">Community Security Watch and Crime Monitoring</h1>
    </div>

    <div class="container mt-2 d-flex align-items-center justify-content-center">
        <EditForm Model="@ApplicationState.formInfo" OnValidSubmit="FormSubmitted">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="postcode" class="form-label h5 fw-bold" style="color: #800080">Postcode</label>
                <InputText id="postcode" class="form-control" Placeholder="Postcode" @bind-Value="ApplicationState.formInfo.Postcode" />
                <ValidationMessage For="@(() => ApplicationState.formInfo.Postcode)" />
                <div class="form-text">
                    Please Insert Postcode in this format: PO148B
                </div>
            </div>

            <div class="mb-3">
                <label for="date" class="form-label h5 fw-bold" style="color:#800080">Pick Date To Check</label>
                <DatePicker TValue="DateTime?" @bind-Dates="@ApplicationState.formInfo.DateRange" InputMode="DateInputMode.Date" SelectionMode="DateInputSelectionMode.Range" StaticPicker="false" />
                <ValidationMessage For="@(() => ApplicationState.formInfo.DateRange)" />
                <div class="form-text">
                    Insert month range or a single month.
                </div>
            </div>
            <button type="submit" class="btn" style="background-color:#800080; color: white;">Submit</button>
        </EditForm>



    </div>
</div>
<LoadingIndicator @ref="loadingIndicator">
    <!-- Crime Map Display -->
    @if (ApplicationState.showMap)
    {
        <CrimeMap />
    }

    @if (ApplicationState.crimeResults != null && ApplicationState.crimeResults.Any())
    {
        <CategoryCountTable categoryCounts="@ApplicationState.categoryCounts" />
        <CategoryCountChart categoryCounts="@ApplicationState.categoryCounts" />

        <StreetCountTable streetCounts="@ApplicationState.streetCounts" />
        <StreetCountChart streetCounts="@ApplicationState.streetCounts" />

        <CrimeRecordTable results="@ApplicationState.crimeResults" FormInfo="@ApplicationState.formInfo" />
    }
    else if (ApplicationState.archiveDataResult != null && ApplicationState.archiveDataResult.Any())
    {
        <CategoryCountTable categoryCounts="@ApplicationState.categoryCounts" />
        <CategoryCountChart categoryCounts="@ApplicationState.categoryCounts" />

        <StreetCountTable streetCounts="@ApplicationState.streetCounts" />
        <StreetCountChart streetCounts="@ApplicationState.streetCounts" />

        <CrimeRecordTable archiveDataResult="@ApplicationState.archiveDataResult" FormInfo="@ApplicationState.formInfo" />
    }
    else
    {
        Console.WriteLine("No Data Passed into the result. Check the API, and make sure the date inserted is within the range");
    }
</LoadingIndicator>
@code
{
    private bool showMap = false;
    private LoadingIndicator loadingIndicator;

    [Inject]
    public AppState ApplicationState { get; set; }

    private bool isFirstRender = true;

    public async Task FormSubmitted()
    {
        await loadingIndicator.Show();
        DateTime? startDate = ApplicationState.formInfo.DateRange[0];
        DateTime? endDate = ApplicationState.formInfo.DateRange.Count > 1 ? ApplicationState.formInfo.DateRange[1] : null;

        Console.WriteLine($"Submitted Postcode: {ApplicationState.formInfo.Postcode}");
        Console.WriteLine($"Submitted Date: {startDate?.ToString("yyyy-MM-dd")} and {(endDate.HasValue ? endDate.Value.ToString("yyyy-MM-dd") : "No End Date Selected")}");

        if (startDate.HasValue)
        {
            int year = startDate.Value.Year;
            if (year >= 2020)
            {
                ApplicationState.crimeResults = ApiMethods.CheckPostcodeCrimeRate(ApplicationState.formInfo.Postcode, startDate ?? DateTime.MinValue, endDate ?? DateTime.MinValue);

            }
            else
            {
                PostcodeConverter converter = ArchiveCrimeByRadius.GetPostcodeForArchiveData(ApplicationState.formInfo.Postcode);
                string directoryPath = @"C:\Users\ola\Desktop\Police";
                ApplicationState.archiveDataResult = ArchiveCrimeByRadius.ProcessDirectory(converter, directoryPath, startDate ?? DateTime.MinValue, endDate ?? DateTime.MinValue);

            }

            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Date is not picked");
            return;
        }

        // Process crimeResults
        if (ApplicationState.crimeResults != null && ApplicationState.crimeResults.Any())
        {
            Console.WriteLine($"crimeResults count: {ApplicationState.crimeResults.Count}");
            CountCategories();
            CountStreets();
        }
        // Process archiveDataResult
        else if (ApplicationState.archiveDataResult != null && ApplicationState.archiveDataResult.Any())
        {
            Console.WriteLine($"archiveDataResult count: {ApplicationState.archiveDataResult.Count}");
            CountCategoriesArchive();
            CountStreetsArchive();
        }
        else
        {
            Console.WriteLine("No data found in either crimeResults or archiveDataResult.");
            return;
        }

        ApplicationState.showMap = true;
        StateHasChanged();

        // Save the state to session storage

        await ProtectedSessionStorage.SetAsync("ApplicationState", ApplicationState);

        // Delay for DOM update
        await Task.Delay(3000);
        await JSRuntime.InvokeVoidAsync("getMap", GenerateCrimeDataForMap());
        await loadingIndicator.Hide();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100);

            // Load the application state from session storage
            var storedState = await ProtectedSessionStorage.GetAsync<AppState>("ApplicationState");

            if (storedState.Success && storedState.Value != null)
            {
                ApplicationState = storedState.Value;
            }
            else
            {
                Console.WriteLine("No data found in session storage.");
            }

            if (ApplicationState.showMap)
            {
                await JSRuntime.InvokeVoidAsync("getMap", GenerateCrimeDataForMap());
            }
        }
    }

    private List<object> GenerateCrimeDataForMap()
    {
        if (ApplicationState.crimeResults != null && ApplicationState.crimeResults.Any())
        {
            return ApplicationState.crimeResults.Select(ci => new
            {
                Longitude = float.Parse(ci.location.longitude.ToString(CultureInfo.InvariantCulture)),
                Latitude = float.Parse(ci.location.latitude.ToString(CultureInfo.InvariantCulture)),
                Street = ci.location.street.Name,
                Count = ApplicationState.crimeResults.Count(c => c.location.longitude == ci.location.longitude
                    && c.location.latitude == ci.location.latitude
                    && c.location.street.Name == ci.location.street.Name)
            }).Cast<object>().ToList();
        }
        else if (ApplicationState.archiveDataResult != null && ApplicationState.archiveDataResult.Any())
        {
            return ApplicationState.archiveDataResult.Select(ci => new
            {
                Longitude = float.Parse(ci.Longitude.ToString(CultureInfo.InvariantCulture)),
                Latitude = float.Parse(ci.Latitude.ToString(CultureInfo.InvariantCulture)),
                Street = ci.Street,
                Count = ApplicationState.archiveDataResult.Count(c => c.Longitude == ci.Longitude
                    && c.Latitude == ci.Latitude
                    && ci.Street == c.Street)
            }).Cast<object>().ToList();
        }

        return new List<object>();
    }

    public void CountCategories()
    {
        ApplicationState.categoryCounts = ApplicationState.crimeResults
            .GroupBy(ci => ci.category)
            .ToDictionary(g => g.Key, g => g.Count());
    }

    public void CountStreets()
    {
        ApplicationState.streetCounts = ApplicationState.crimeResults
            .GroupBy(ci => new { ci.location?.street?.Name, ci.location?.latitude, ci.location?.longitude })
            .Select(g => new StreetCrimeData
                {
                    StreetName = g.Key.Name,
                    CrimeCount = g.Count(),
                    Latitude = g.Key.latitude,
                    Longitude = g.Key.longitude,
                    Crimes = string.Join(", ", g.Select(ci => ci.category)),
                    CrimeCountsByType = g.GroupBy(ci => ci.category).ToDictionary(grp => grp.Key, grp => grp.Count())
                }).ToList();
    }

    public void CountCategoriesArchive()
    {
        ApplicationState.categoryCounts = ApplicationState.archiveDataResult
            .GroupBy(ci => ci.CrimeType)
            .ToDictionary(g => g.Key, g => g.Count());
    }

    public void CountStreetsArchive()
    {
        ApplicationState.streetCounts = ApplicationState.archiveDataResult
            .GroupBy(ci => new { ci.Street, ci.Latitude, ci.Longitude })
            .Select(g => new StreetCrimeData
                {
                    StreetName = g.Key.Street,
                    CrimeCount = g.Count(),
                    Latitude = g.Key.Latitude.ToString(),
                    Longitude = g.Key.Longitude.ToString(),
                    Crimes = string.Join(", ", g.Select(ci => ci.CrimeType)),
                    CrimeCountsByType = g.GroupBy(ci => ci.CrimeType).ToDictionary(grp => grp.Key, grp => grp.Count())
                }).ToList();
    }

}

<script>
    window.getMap = function (crimeData) {
        if (!crimeData || crimeData.length === 0) {
            console.error("No crime data provided.");
            return;
        }

        // Check the crime data
        console.log("Received crime data: ", crimeData);

        // Check for coordinates validity
        const firstCrime = crimeData[0];
        const longitude = parseFloat(firstCrime.longitude);
        const latitude = parseFloat(firstCrime.latitude);

        if (isNaN(longitude) || isNaN(latitude)) {
            console.error("Invalid coordinates for the first crime data:", firstCrime);
            return;
        }

        // map instance with the first crime location
        var map = new atlas.Map('myMap', {
            center: [longitude, latitude],
            zoom: 13,
            view: 'Auto',

            // AzureMap Authentication
            authOptions: {
                authType: 'subscriptionKey',
                subscriptionKey: '3UzKDPLy12XBZ29RhdB9DVQo5lb3ewnSmvtgGzmPW4CaLBbL1Mi1JQQJ99AHACi5Ypz6xdAlAAAgAZMPfHOj'
            }
        });

        // check if map is ready
        map.events.add('ready', function () {
            console.log("Map is ready.");

            // Create a data source and add to map
            var datasource = new atlas.source.DataSource();
            map.sources.add(datasource);

            // Create a circle from the first crime location's coordinates
            var pointFeature = new atlas.data.Feature(new atlas.data.Point([longitude, latitude]), {
                subType: "Circle",
                radius: 600
            });
            datasource.add(pointFeature);

            // Log the point feature details
            console.log("Datasource point feature: ", pointFeature);

            // Create a polygon layer to render the filled-in area
            map.layers.add(new atlas.layer.PolygonLayer(datasource, null, {
                fillColor: 'green'
            }));

            // Add markers for all crime locations
            crimeData.forEach(function (crime) {
                var markerPosition = [parseFloat(crime.longitude), parseFloat(crime.latitude)];

                // Ensure marker position has valid coordinates
                if (isNaN(markerPosition[0]) || isNaN(markerPosition[1])) {
                    console.error("Invalid coordinates for marker: ", markerPosition);
                    return;
                }

                console.log("Adding marker at position: ", markerPosition);

                var marker = new atlas.HtmlMarker({
                    htmlContent: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="80" viewBox="0 0 200 80" xml:space="preserve"><rect x="0" y="0" rx="8" ry="8" width="200" height="60" fill="purple"/>
                                                                                                                        <polygon fill="purple" points="10,59 190,59 100,80 10,59"/><text x="100" y="40" style="font-size:12px;font-family:arial;fill:#ffffff;" text-anchor="middle">Crime(s) Recorded: ${crime.count}</text><text x="100" y="20" style="font-size:14px;font-family:arial;fill:#ffffff;" text-anchor="middle">${crime.street}</text>
                                                                                                                </svg>`,
                    color: '',
                    text: `${crime.street} <br>"Crime Recorded:" ${crime.count.toString()}`,
                    position: markerPosition
                });

                // Add marker to the map
                map.markers.add(marker);
            });

            // Check if the markers have been added
            console.log("Markers added to the map: ", map.markers.getMarkers());
        });
    }
</script>


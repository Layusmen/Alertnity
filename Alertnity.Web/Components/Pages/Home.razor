@page "/"
@using Alertnity
@using Alertnity.PoliceApi
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using Alertnity.Web.Models
@inject IJSRuntime JSRuntime
@using Blazorise;

<h1 class="container mt-2 d-flex align-items-center justify-content-center"> Welcome to Alertnity! Check Your Community Crime Details </h1>

<div class="container mt-2 d-flex align-items-center justify-content-center">
    <EditForm Model="@FormInfo" OnValidSubmit="FormSubmitted">
        <div class="mb-3">
            <label for="postcode" class="form-label">Postcode</label>
            <InputText id="postcode" class="form-control" Placeholder="Postcode" @bind-Value="FormInfo.Postcode" />
            <div class="form-text">
                Please Insert Postcode in this format: PO148B
            </div>
        </div>

        <div class="mb-3">
            <label for="date" class="form-label">Date To Check</label>

            <InputDate  class="form-control" @bind-Value="FormInfo.Date" />
            <div class="form-text">
                Insert month in this format: YYYY-MM.
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
</div>

<!-- Crime Map Display -->
<CrimeMap/>

@if (results != null && results.Any())
{
    <CategoryCountTable categoryCounts="@categoryCounts" />
    <StreetCountTable streetCounts="@streetCounts" />
    <CrimeRecordTable results="@results" FormInfo="@FormInfo" />
}
else
{
    <div>
        No Data Passed into the result
    </div>
    Console.Write("No Data Passed into the result");
}

@code {
    private CrimeCheckModel FormInfo = new CrimeCheckModel();
    private List<CrimeInfo> results = new();
    private Dictionary<string, int> categoryCounts = new();
    private List<StreetCrimeData> streetCounts = new();

    private async Task FormSubmitted()
    { 
        Console.WriteLine($"Submitted Postcode: {FormInfo.Postcode}");
        Console.WriteLine($"Submitted Date: {FormInfo.Date}");

        if(FormInfo.Date.HasValue)
        {
            var monthYear = FormInfo.Date.Value.ToString("yyyy-MM");
            Console.WriteLine($"Submitted Date (Year-Month): {monthYear}");
            results = ApiMethods.CheckPostcodeCrimeRate(FormInfo.Postcode, FormInfo.Date.Value);
        }
        else
        {
            Console.WriteLine("Date is not picked");
        }

        if (results != null && results.Any())
        {
            CountCategories();
            CountStreets();
            var crimeData = results.Select(ci => new
            {
                Longitude = float.Parse(ci.location.longitude.ToString(CultureInfo.InvariantCulture)),
                Latitude = float.Parse(ci.location.latitude.ToString(CultureInfo.InvariantCulture)),
                Street = ci.location.street.Name,
                Count = results.Count(c => c.location.longitude == ci.location.longitude 
                    && c.location.latitude == ci.location.latitude 
                    && ci.location.street.Name == ci.location.street.Name)
            }).ToList();

            await JSRuntime.InvokeVoidAsync("getMap", crimeData);
        }
        else
        {
            Console.WriteLine("Check the authenticity of the API addresses. Something is wrong somewhere");
        }
    }

    private void CountCategories()
    {
        categoryCounts = results
            .GroupBy(ci => ci.category)
            .ToDictionary(g => g.Key, g => g.Count());
    }

    private void CountStreets()
    {
        streetCounts = results
            .GroupBy(ci => new { ci.location?.street?.Name, ci.location?.latitude, ci.location?.longitude })
            .Select(g => new StreetCrimeData
                {
                    StreetName = g.Key.Name,
                    CrimeCount = g.Count(),
                    Latitude = g.Key.latitude,
                    Longitude = g.Key.longitude,
                    Crimes = string.Join(", ", g.Select(ci => ci.category)),
                    CrimeCountsByType = g.GroupBy(ci => ci.category)
                                         .ToDictionary(grp => grp.Key, grp => grp.Count())
                })
            .ToList();
    }
}
<script>
    window.getMap = function (crimeData) {
        if (!crimeData || crimeData.length === 0) {
            console.error("No crime data provided.");
            return;
        }

        // Check the crime data
        console.log("Received crime data: ", crimeData);

        // Check for coordinates validity
        const firstCrime = crimeData[0];
        const longitude = parseFloat(firstCrime.longitude);
        const latitude = parseFloat(firstCrime.latitude);

        if (isNaN(longitude) || isNaN(latitude)) {
            console.error("Invalid coordinates for the first crime data:", firstCrime);
            return;
        }

        // map instance with the first crime location
        var map = new atlas.Map('myMap', {
            center: [longitude, latitude],
            zoom: 13,
            view: 'Auto',

            // AzureMap Authentication
            authOptions: {
                authType: 'subscriptionKey',
                subscriptionKey: '3UzKDPLy12XBZ29RhdB9DVQo5lb3ewnSmvtgGzmPW4CaLBbL1Mi1JQQJ99AHACi5Ypz6xdAlAAAgAZMPfHOj'
            }
        });

        // check if map is ready
        map.events.add('ready', function () {
            console.log("Map is ready.");

            // Create a data source and add to map
            var datasource = new atlas.source.DataSource();
            map.sources.add(datasource);

            // Create a circle from the first crime location's coordinates
            var pointFeature = new atlas.data.Feature(new atlas.data.Point([longitude, latitude]), {
                subType: "Circle",
                radius: 600
            });
            datasource.add(pointFeature);

            // Log the point feature details
            console.log("Datasource point feature: ", pointFeature);

            // Create a polygon layer to render the filled-in area
            map.layers.add(new atlas.layer.PolygonLayer(datasource, null, {
                fillColor: 'green'
            }));

            // Add markers for all crime locations
            crimeData.forEach(function (crime) {
                var markerPosition = [parseFloat(crime.longitude), parseFloat(crime.latitude)];

            // Ensure marker position has valid coordinates
                if (isNaN(markerPosition[0]) || isNaN(markerPosition[1])) {
                    console.error("Invalid coordinates for marker: ", markerPosition);
                    return;
                }

                console.log("Adding marker at position: ", markerPosition);

                var marker = new atlas.HtmlMarker({
                    htmlContent: `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="80" viewBox="0 0 200 80" xml:space="preserve"><rect x="0" y="0" rx="8" ry="8" width="200" height="60" fill="purple"/>
                                                                        <polygon fill="purple" points="10,59 190,59 100,80 10,59"/><text x="100" y="40" style="font-size:12px;font-family:arial;fill:#ffffff;" text-anchor="middle">${crime.street}</text><text x="100" y="20" style="font-size:14px;font-family:arial;fill:#ffffff;" text-anchor="middle">Number of Crime: ${crime.count}</text>
                                                                        </svg>`,
                    color: '',
                    text: `${crime.street} <br>"Crime Recorded:" ${crime.count.toString()}`,
                    position: markerPosition
                });

             // Add marker to the map
                map.markers.add(marker);
            });

            // Check if the markers have been added
            console.log("Markers added to the map: ", map.markers.getMarkers());
        });
    }
</script>
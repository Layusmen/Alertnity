@using ChartJs.Blazor.PieChart

<div class="container border-5 mt-5" style="width:100%; height:800px">
    <button>Update Chart</button>
    <h2 class="fw-bolder text-center pt-4" style="color: #800080;">Category Counts</h2>
    <Chart Config="_config"></Chart>
</div>



@code {
    private PieConfig _config;

    [Parameter]
    public Dictionary<string, int> categoryCounts { get; set; } = new();

    protected override void OnInitialized()
    {
        InitializeChart();
    }

    private void InitializeChart()
    {
        _config = new PieConfig
            {
                Options = new PieOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Crime Category Distribution"
                    }
                }
            };

        UpdateChartData();
    }

    private void UpdateChartData()
    {
        _config.Data.Labels.Clear();
        _config.Data.Datasets.Clear();

        // Add labels dynamically from categoryCounts keys
        foreach (var label in categoryCounts.Keys)
        {
            _config.Data.Labels.Add(label);
        }

        // Get the count values dynamically from categoryCounts values
        var counts = categoryCounts.Values.Select(v => (int)v).ToList();

        // Generate dynamic colors for each category
        var colors = GenerateRandomColors(counts.Count);

        PieDataset<int> dataset = new PieDataset<int>(counts)
            {
                BackgroundColor = colors.ToArray() // Convert List<string> to string[]
            };

        _config.Data.Datasets.Add(dataset);
    }

    

    // Method to generate random colors in hex format
    private List<string> GenerateRandomColors(int count)
    {
        var random = new Random();
        var colors = new List<string>();

        for (int i = 0; i < count; i++)
        {
            // Ensure values are within byte range (0-255)
            byte r = (byte)random.Next(256);
            byte g = (byte)random.Next(256);
            byte b = (byte)random.Next(256);

            // Create color in hex format
            colors.Add(ColorUtil.ColorHexString(r, g, b));
        }

        return colors;
    }
}

@using Alertnity.Web.Models;
@inject IJSRuntime JSRuntime;

<div class="container border-5 mt-5" style="width:100%; height:800px;">
    <h2 class="fw-bolder text-center pt-4" style="color: #800080;">Crimes by Category</h2>
    <div class="chart-container" style="width:100%; height:90%; display: flex; justify-content: center; align-items: center;">
        <canvas class="mx-auto" id="myChart" style="width: 80%; height: 80%;"></canvas>
    </div>
</div>

@code {

    [Parameter]
    public Dictionary<string, int> categoryCounts { get; set; } = new();
   
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string[] labels = categoryCounts.Keys.ToArray();
            var data = categoryCounts.Values.Select(v => (double)v).ToList();

            // Call the JavaScript Interop
            await JSRuntime.InvokeVoidAsync("createDoughnutChart", "myChart", labels, data);
        }
    }

}
<script>
    window.createDoughnutChart = (canvasId, labels, data) => {
        var ctx = document.getElementById(canvasId).getContext('2d');

        // Calculate total value of all data points
        const total = data.reduce((acc, value) => acc + value, 0);

        // Chart data
        const chartData = {
            labels: labels,
            datasets: [{
                label: 'Crimes by Category',
                data: data,
                backgroundColor: [
                    'rgba(255, 99, 132)',
                    'rgba(54, 162, 235)',
                    'rgba(255, 206, 86)',
                    'rgba(75, 192, 192)',
                    'rgba(153, 102, 255)'
                ],
                hoverOffset: 8
            }]
        };

        // Chart.js configuration
        const config = {
            type: 'doughnut',
            data: chartData,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom',
                    },
                    tooltip: {
                        callbacks: {
                            label: function (tooltipItem) {
                                // Get the value and calculate percentage
                                var value = tooltipItem.raw;
                                var percentage = ((value / total) * 100).toFixed(2);

                                // Tooltip label value and percentage
                                return `${tooltipItem.label}: ${value} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        };

        // Create and render the chart
        new Chart(ctx, config);
    };
</script>